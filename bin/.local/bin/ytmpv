#!/bin/bash

IFS=$'\n'
[[ -d $HOME/.cache/ytmpv ]] || mkdir $HOME/.cache/ytmpv;
cd $HOME/.cache/ytmpv;

videoSearch=$(zenity --entry --text "Type your search:" --width=400 --height=100)

[ -z "$videoSearch" ] && { printf "\n\n \033[31;1mSearch not detected. Leaving\n\n\n"; exit; }

# Separating search from options with -- to escape searchs or links starting with dash (-)
youtube-dl --get-id --get-title ytsearch20:--"$videoSearch" > searchResults.txt

# Create a alias (:a) to \n with N, then replace every new line with  (###) 
declare -a searchResults=($(sed ":a;N;s/\n/ (###) /g" searchResults.txt))
echo $(zenity --list --column="ytmpv | Search results for: $videoSearch" "${searchResults[@]}" --width=800 --height=480) | tee selectedVideo.txt

# check if selectedVideo.txt is not empty
if [[ -z $(cat selectedVideo.txt) ]]; then
    printf "\n\n \e[31;1mVideo not selected. Leaving\n\n\n";
    rm searchResults.txt selectedVideo.txt
    exit;
fi

# Replace the expression and all content after that to nothing, to get only the video title to print on terminal
printf "\n\n\n \e[32;1mVideo to be played: $(sed 's/ (###) .*//g' selectedVideo.txt) \n\n\n\n";
unset $IFS

# Replace all content before a whitespace with nothing, to get the videoID
videoID=$(sed "s/.* //g" selectedVideo.txt)

rm searchResults.txt selectedVideo.txt; cd $HOME

youtube-dl -f best -o- -- "$videoID" | mpv -
